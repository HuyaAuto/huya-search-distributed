/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.huya.search.rpc;

import com.huya.search.index.data.QueryResultRow;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.index.IndexableField;
import org.apache.lucene.index.IndexableFieldType;
import org.apache.lucene.util.BytesRef;

import java.io.Reader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RpcResultRow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, QueryResultRow {
  private static final long serialVersionUID = -6810074774177208847L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RpcResultRow\",\"namespace\":\"com.huya.search.rpc\",\"fields\":[{\"name\":\"resultRow\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RpcResultRow> ENCODER =
      new BinaryMessageEncoder<RpcResultRow>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RpcResultRow> DECODER =
      new BinaryMessageDecoder<RpcResultRow>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RpcResultRow> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RpcResultRow> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RpcResultRow>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RpcResultRow to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RpcResultRow from a ByteBuffer. */
  public static RpcResultRow fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.Map<CharSequence,CharSequence> resultRow;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RpcResultRow() {}

  public RpcResultRow(Iterator<IndexableField> iterator) {
    this.resultRow = new HashMap<>();
    while (iterator.hasNext()) {
      IndexableField field = iterator.next();
      this.resultRow.put(field.name(), field.stringValue());
    }
  }

  /**
   * All-args constructor.
   * @param resultRow The new value for resultRow
   */
  public RpcResultRow(java.util.Map<CharSequence,CharSequence> resultRow) {
    this.resultRow = resultRow;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return resultRow;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: resultRow = (java.util.Map<CharSequence,CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'resultRow' field.
   * @return The value of the 'resultRow' field.
   */
  public java.util.Map<CharSequence,CharSequence> getResultRow() {
    return resultRow;
  }

  /**
   * Sets the value of the 'resultRow' field.
   * @param value the value to set.
   */
  public void setResultRow(java.util.Map<CharSequence,CharSequence> value) {
    this.resultRow = value;
  }

  /**
   * Creates a new RpcResultRow RecordBuilder.
   * @return A new RpcResultRow RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new RpcResultRow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RpcResultRow RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new RpcResultRow RecordBuilder by copying an existing RpcResultRow instance.
   * @param other The existing instance to copy.
   * @return A new RpcResultRow RecordBuilder
   */
  public static Builder newBuilder(RpcResultRow other) {
    return new Builder(other);
  }

  @Override
  public CharSequence getCharSequence(CharSequence name) {
    return resultRow.get(name);
  }

  @Override
  public Iterator<IndexableField> iterator() {
    return new Iterator<IndexableField>(){

      private Iterator<Map.Entry<CharSequence, CharSequence>> iterator = resultRow.entrySet().iterator();

      @Override
      public boolean hasNext() {
        return iterator.hasNext();
      }

      @Override
      public IndexableField next() {
        Map.Entry<CharSequence, CharSequence> entry = iterator.next();
        return new IndexableField() {

          @Override
          public String name() {
            return entry.getKey().toString();
          }

          @Override
          public IndexableFieldType fieldType() {
            return null;
          }

          @Override
          public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {
            return null;
          }

          @Override
          public float boost() {
            return 0;
          }

          @Override
          public BytesRef binaryValue() {
            return null;
          }

          @Override
          public String stringValue() {
            return entry.getValue().toString();
          }

          @Override
          public Reader readerValue() {
            return null;
          }

          @Override
          public Number numericValue() {
            return null;
          }
        };
      }
    };
  }

  /**
   * RecordBuilder for RpcResultRow instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RpcResultRow>
    implements org.apache.avro.data.RecordBuilder<RpcResultRow> {

    private java.util.Map<CharSequence,CharSequence> resultRow;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resultRow)) {
        this.resultRow = data().deepCopy(fields()[0].schema(), other.resultRow);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RpcResultRow instance
     * @param other The existing instance to copy.
     */
    private Builder(RpcResultRow other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.resultRow)) {
        this.resultRow = data().deepCopy(fields()[0].schema(), other.resultRow);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'resultRow' field.
      * @return The value.
      */
    public java.util.Map<CharSequence,CharSequence> getResultRow() {
      return resultRow;
    }

    /**
      * Sets the value of the 'resultRow' field.
      * @param value The value of 'resultRow'.
      * @return This builder.
      */
    public Builder setResultRow(java.util.Map<CharSequence,CharSequence> value) {
      validate(fields()[0], value);
      this.resultRow = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resultRow' field has been set.
      * @return True if the 'resultRow' field has been set, false otherwise.
      */
    public boolean hasResultRow() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resultRow' field.
      * @return This builder.
      */
    public Builder clearResultRow() {
      resultRow = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RpcResultRow build() {
      try {
        RpcResultRow record = new RpcResultRow();
        record.resultRow = fieldSetFlags()[0] ? this.resultRow : (java.util.Map<CharSequence,CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RpcResultRow>
    WRITER$ = (org.apache.avro.io.DatumWriter<RpcResultRow>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RpcResultRow>
    READER$ = (org.apache.avro.io.DatumReader<RpcResultRow>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
