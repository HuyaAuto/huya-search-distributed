/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.huya.search.rpc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RpcRefreshContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4953327387194767085L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RpcRefreshContext\",\"namespace\":\"com.huya.search.rpc\",\"fields\":[{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"unixTime\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RpcRefreshContext> ENCODER =
      new BinaryMessageEncoder<RpcRefreshContext>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RpcRefreshContext> DECODER =
      new BinaryMessageDecoder<RpcRefreshContext>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RpcRefreshContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RpcRefreshContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RpcRefreshContext>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RpcRefreshContext to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RpcRefreshContext from a ByteBuffer. */
  public static RpcRefreshContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence table;
  @Deprecated public long unixTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RpcRefreshContext() {}

  /**
   * All-args constructor.
   * @param table The new value for table
   * @param unixTime The new value for unixTime
   */
  public RpcRefreshContext(CharSequence table, Long unixTime) {
    this.table = table;
    this.unixTime = unixTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return table;
    case 1: return unixTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: table = (CharSequence)value$; break;
    case 1: unixTime = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'unixTime' field.
   * @return The value of the 'unixTime' field.
   */
  public Long getUnixTime() {
    return unixTime;
  }

  /**
   * Sets the value of the 'unixTime' field.
   * @param value the value to set.
   */
  public void setUnixTime(Long value) {
    this.unixTime = value;
  }

  /**
   * Creates a new RpcRefreshContext RecordBuilder.
   * @return A new RpcRefreshContext RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new RpcRefreshContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RpcRefreshContext RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new RpcRefreshContext RecordBuilder by copying an existing RpcRefreshContext instance.
   * @param other The existing instance to copy.
   * @return A new RpcRefreshContext RecordBuilder
   */
  public static Builder newBuilder(RpcRefreshContext other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for RpcRefreshContext instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RpcRefreshContext>
    implements org.apache.avro.data.RecordBuilder<RpcRefreshContext> {

    private CharSequence table;
    private long unixTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unixTime)) {
        this.unixTime = data().deepCopy(fields()[1].schema(), other.unixTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RpcRefreshContext instance
     * @param other The existing instance to copy.
     */
    private Builder(RpcRefreshContext other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.table)) {
        this.table = data().deepCopy(fields()[0].schema(), other.table);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.unixTime)) {
        this.unixTime = data().deepCopy(fields()[1].schema(), other.unixTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public CharSequence getTable() {
      return table;
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public Builder setTable(CharSequence value) {
      validate(fields()[0], value);
      this.table = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public Builder clearTable() {
      table = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'unixTime' field.
      * @return The value.
      */
    public Long getUnixTime() {
      return unixTime;
    }

    /**
      * Sets the value of the 'unixTime' field.
      * @param value The value of 'unixTime'.
      * @return This builder.
      */
    public Builder setUnixTime(long value) {
      validate(fields()[1], value);
      this.unixTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'unixTime' field has been set.
      * @return True if the 'unixTime' field has been set, false otherwise.
      */
    public boolean hasUnixTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'unixTime' field.
      * @return This builder.
      */
    public Builder clearUnixTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RpcRefreshContext build() {
      try {
        RpcRefreshContext record = new RpcRefreshContext();
        record.table = fieldSetFlags()[0] ? this.table : (CharSequence) defaultValue(fields()[0]);
        record.unixTime = fieldSetFlags()[1] ? this.unixTime : (Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RpcRefreshContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<RpcRefreshContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RpcRefreshContext>
    READER$ = (org.apache.avro.io.DatumReader<RpcRefreshContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
